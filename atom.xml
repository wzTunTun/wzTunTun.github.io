<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>无 证 豚 豚</title>
  
  <subtitle>豚豚的个人博客</subtitle>
  <link href="https://wztuntun.github.io/atom.xml" rel="self"/>
  
  <link href="https://wztuntun.github.io/"/>
  <updated>2022-04-11T04:48:54.110Z</updated>
  <id>https://wztuntun.github.io/</id>
  
  <author>
    <name>Kevin Lee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>innerHTML和createElement效率对比</title>
    <link href="https://wztuntun.github.io/2022/04/10/innerHTML%E5%92%8CcreateElement%E6%95%88%E7%8E%87%E5%AF%B9%E6%AF%94/"/>
    <id>https://wztuntun.github.io/2022/04/10/innerHTML%E5%92%8CcreateElement%E6%95%88%E7%8E%87%E5%AF%B9%E6%AF%94/</id>
    <published>2022-04-10T04:48:00.000Z</published>
    <updated>2022-04-11T04:48:54.110Z</updated>
    
    <content type="html"><![CDATA[<h3 id="动态创建元素的方式"><a href="#动态创建元素的方式" class="headerlink" title="动态创建元素的方式"></a>动态创建元素的方式</h3><ul><li><p>document.write()</p></li><li><p>innerHTML</p></li><li><p>document.createElement()</p></li></ul><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ol><li>document.write是直接将内容写入页面的内容流，但是当文档流执行完毕，它会导致页面全部重绘。（不常用）</li><li>innerHTML是将内容写入某个DOM节点，不会导致页面全部重绘。</li><li>innerHTML做字符串拼接时，效率较低，使用数组拼接时效率更高，但结构稍微复杂一点。</li><li>createElement()创建多个元素时效率稍微低一点点，但结构清晰。</li></ol><h3 id="具体演示"><a href="#具体演示" class="headerlink" title="具体演示"></a>具体演示</h3><h5 id="innerHTML（字符串拼接）"><a href="#innerHTML（字符串拼接）" class="headerlink" title="innerHTML（字符串拼接）"></a>innerHTML（字符串拼接）</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> d1 <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> <span class="token string">'&lt;div style="width:100px;height:2px;border:1px solid blue;">&lt;/div>'</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">var</span> d2 <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d2 <span class="token operator">-</span> d1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行耗时如下</p><p><img src="https://s1.ax1x.com/2022/04/10/Lk8QgS.png"></p><h5 id="innerHTML（数组拼接）"><a href="#innerHTML（数组拼接）" class="headerlink" title="innerHTML（数组拼接）"></a>innerHTML（数组拼接）</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> d1 <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> <span class="token string">'&lt;div style="width:100px;height:2px;border:1px solid blue;">&lt;/div>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> d2 <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d2 <span class="token operator">-</span> d1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行耗时如下</p><p><img src="https://s1.ax1x.com/2022/04/10/Lk8W8K.png"></p><p>可以说效果提升是非常显著。</p><h5 id="createElement"><a href="#createElement" class="headerlink" title="createElement()"></a>createElement()</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> d1 <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">creatElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">'100px'</span><span class="token punctuation">;</span>                div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">'2px'</span><span class="token punctuation">;</span>                div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>border <span class="token operator">=</span> <span class="token string">'1px solid blue'</span><span class="token punctuation">;</span>                document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> d2 <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d2 <span class="token operator">-</span> d1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行耗时如下</p><p><img src="https://s1.ax1x.com/2022/04/10/LkGxW6.png"></p><p>比上一种方法运行效果稍慢一些，但结构清晰，有利于代码维护。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;动态创建元素的方式&quot;&gt;&lt;a href=&quot;#动态创建元素的方式&quot; class=&quot;headerlink&quot; title=&quot;动态创建元素的方式&quot;&gt;&lt;/a&gt;动态创建元素的方式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;document.write()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p</summary>
      
    
    
    
    <category term="学习" scheme="https://wztuntun.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaScript" scheme="https://wztuntun.github.io/categories/%E5%AD%A6%E4%B9%A0/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://wztuntun.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>两数之和-年轻人的第一道力扣</title>
    <link href="https://wztuntun.github.io/2022/04/09/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C-%E5%B9%B4%E8%BD%BB%E4%BA%BA%E7%9A%84%E7%AC%AC%E4%B8%80%E9%81%93%E5%8A%9B%E6%89%A3/"/>
    <id>https://wztuntun.github.io/2022/04/09/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C-%E5%B9%B4%E8%BD%BB%E4%BA%BA%E7%9A%84%E7%AC%AC%E4%B8%80%E9%81%93%E5%8A%9B%E6%89%A3/</id>
    <published>2022-04-09T13:23:00.000Z</published>
    <updated>2022-04-10T06:15:34.861Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>终于终于，博主开始了艰苦LeetCode刷题的第一步，算法的起点————两数之和。</p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><blockquote><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。<br>你可以按任意顺序返回答案。</p></blockquote><h6 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h6><pre class="line-numbers language-none"><code class="language-none">输入：nums &#x3D; [2,7,11,15], target &#x3D; 9输出：[0,1]解释：因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。来源：力扣（LeetCode）链接：https:&#x2F;&#x2F;leetcode-cn.com&#x2F;problems&#x2F;two-sum著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="开始解题"><a href="#开始解题" class="headerlink" title="开始解题"></a>开始解题</h3><h5 id="自己的思考"><a href="#自己的思考" class="headerlink" title="自己的思考"></a>自己的思考</h5><p>由于没有什么算法基础，看到题目首先自然而然想到的就是暴力求解😂。通过两次循环，先从头选定数组的第一个元素，然后遍历剩下的元素，如果找到和等于target的就输出，否则进入下一次循环。<br>代码如下</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">var twoSum &#x3D; function(nums, target) &#123;        for(var i &#x3D; 0;i&lt;nums.length;i++)&#123;        for(var j&#x3D;i+1;j&lt;nums.length;j++)            if(nums[i]+nums[j]&#x3D;&#x3D;target)&#123;                return [i,j];                break            &#125;        &#125;            &#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，效果就很拉跨。<br><img src="https://s1.ax1x.com/2022/04/09/LFGpmd.png" alt="结果" title="执行结果"></p><h5 id="交流学习"><a href="#交流学习" class="headerlink" title="交流学习"></a>交流学习</h5><p>自己用笨办法求解完之后，查看了官方的解法————利用哈希表。</p><h6 id="思路及算法"><a href="#思路及算法" class="headerlink" title="思路及算法"></a>思路及算法</h6><p>运用暴力法寻找和等于target的目标的复杂度太高，由于有两次循环，因此时间复杂度为$O(N^2)$。而运用哈希表，可以将时间复杂度从$O(N^2)$降低到$O(1)$。</p><p>原理就是，我们遍历到数字 x 时，用 target 减去 x，就会得到 y，若 y 存在于哈希表中，我们就可以直接返回结果了。若 y 不存在，那么我们需要将 x 存入哈希表，好让后续遍历的数字使用。<br>代码如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> d <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终提交后，执行用时果然快了不少</p><p><img src="https://s1.ax1x.com/2022/04/10/LF0C7D.png" alt="结果"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;终于终于，博主开始了艰苦LeetCode刷题的第一步，算法的起点————两数之和。&lt;/p&gt;
&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目</summary>
      
    
    
    
    <category term="学习" scheme="https://wztuntun.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="LeetCode" scheme="https://wztuntun.github.io/categories/%E5%AD%A6%E4%B9%A0/LeetCode/"/>
    
    
    <category term="JavaScript" scheme="https://wztuntun.github.io/tags/JavaScript/"/>
    
    <category term="力扣" scheme="https://wztuntun.github.io/tags/%E5%8A%9B%E6%89%A3/"/>
    
    <category term="算法" scheme="https://wztuntun.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>markdown的基本语法</title>
    <link href="https://wztuntun.github.io/2022/04/04/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>https://wztuntun.github.io/2022/04/04/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</id>
    <published>2022-04-04T10:20:00.000Z</published>
    <updated>2022-04-04T11:19:47.367Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Markdown是一种轻量级标记语言，创始人为约翰·格鲁伯（英语：John Gruber）。 它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。</p></blockquote><h1 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h1><p>在想要设置标题的文字前加#来表示，并用空格隔开。<br>一个#是一级标题，两个##是二级标题，以此类推，最高支持六级标题。</p><pre class="line-numbers language-none"><code class="language-none">1.# 一级标题2.## 二级标题3.### 三级标题4.#### 四级标题5.##### 五级标题6.###### 六级标题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h1 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h1><pre class="line-numbers language-none"><code class="language-none">1.加粗**内容**2.高亮&#96;内容&#96;3.删除线~~内容~~4.斜体*内容*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下<br>1.加粗<br><strong>内容</strong><br>2.高亮<br><code>内容</code><br>3.删除线<br><del>内容</del><br>4.斜体<br><em>内容</em></p><h1 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h1><p>在引用文字前加&gt;即可。几层引用加几个。<br>(试了一下，貌似可以无限加，但效果会很辣眼睛)</p><pre class="line-numbers language-none"><code class="language-none">&gt;内容&gt;&gt;内容&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>效果如下</p><blockquote><p>内容</p><blockquote><p>内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h1 id="四、分隔线"><a href="#四、分隔线" class="headerlink" title="四、分隔线"></a>四、分隔线</h1><p>三个及以上的-或*即可添加分隔线</p><pre class="line-numbers language-none"><code class="language-none">-------********<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下，都是相同的</p><hr><hr><hr><hr><h1 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h1><pre class="line-numbers language-none"><code class="language-none">语法![alt](图片地址 &quot;title&quot;)alt,title分别对应html中的属性，皆可省略。alt表示显示在图片下方的文字title表示鼠标悬停在图片时的显示文本（注意这里要加引号）示例![MyTunTun](https:&#x2F;&#x2F;ss0.bdstatic.com&#x2F;70cFvHSh_Q1YnxGkpoWK1HF6hhy&#x2F;it&#x2F;u&#x3D;702257389,1274025419&amp;fm&#x3D;27&amp;gp&#x3D;0.jpg &quot;我的豚豚&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下<br><img src="https://wztuntun.github.io/medias/featureimages/1.jpg" alt="MyTunTun" title="我的豚豚"></p><h1 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h1><pre class="line-numbers language-none"><code class="language-none">语法[超链接名](超链接地址 &quot;超链接title&quot;)title可省略示例[豚豚的博客](https:&#x2F;&#x2F;wztuntun.github.io&#x2F;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下<br><a href="https://wztuntun.github.io/">豚豚的博客</a></p><h1 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h1><pre class="line-numbers language-none"><code class="language-none">无序列表（- + *任意一种都行，与文字间用空格隔开）- 目录一+ 目录二* 目录三有序列表1. 名称2. 名称3. 名称列表嵌套下一级前敲两个空格即可- 一级目录  - 二级目录  - 二级目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下</p><ul><li>目录一</li><li>目录二</li><li>目录三</li></ul><ol><li>名称</li><li>名称</li><li>名称</li></ol><ul><li>一级目录<ul><li>二级目录</li><li>二级目录</li></ul></li></ul><h1 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h1><pre class="line-numbers language-none"><code class="language-none">表头|表头|表头--|:--:|--:内容|内容|内容内容|内容|内容第二行分割表头和内容，表示了对齐方式，默认左对齐，还有 右对齐 和 居中。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下</p><table><thead><tr><th>表头</th><th align="center">表头</th><th align="right">表头</th></tr></thead><tbody><tr><td>内容</td><td align="center">内容</td><td align="right">内容</td></tr><tr><td>内容</td><td align="center">内容</td><td align="right">内容</td></tr></tbody></table><h1 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h1><pre class="line-numbers language-none"><code class="language-none">（&#96;&#96;&#96;）+语言（java）内容（&#96;&#96;&#96;）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里为了演示时防止转译，在三个反引号外加了括号，实际上是没有的，需要去除。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Markdown是一种轻量级标记语言，创始人为约翰·格鲁伯（英语：John Gruber）。 它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。&lt;/p&gt;</summary>
      
    
    
    
    <category term="学习" scheme="https://wztuntun.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="markdown" scheme="https://wztuntun.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>哈喽！你好！！</title>
    <link href="https://wztuntun.github.io/2022/04/03/hello-world/"/>
    <id>https://wztuntun.github.io/2022/04/03/hello-world/</id>
    <published>2022-04-03T12:48:00.000Z</published>
    <updated>2022-04-15T12:19:51.636Z</updated>
    
    <content type="html"><![CDATA[<p>我是李孙，全世界最想变成猪的男人，你也可以叫我豚豚，Kevin，小俊,饼干兄…这是我的个人博客，用来分享前端学习以及日常生活。</p><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p><strong>化名：</strong>李孙<br><strong>性别：</strong>男<br><strong>昵称：</strong>无证豚豚<br><strong>外号：</strong>（超级多，就不一一列举了）<br><strong>状态：</strong>单身<br><strong>爱好：</strong>出门闲晃，旅游，摄影，打音游，交朋友，上网冲浪<br><strong>外貌：</strong>和猪一样</p><h1 id="闲话"><a href="#闲话" class="headerlink" title="闲话"></a>闲话</h1><p>22年年初决定试试某岗位实习生，在一顿海投但收获为零之后，意识到了自己确实缺乏竞争力，在朋友的建议下，毅然决然准备转行前端。</p><hr><h1 id="菜鸟进度"><a href="#菜鸟进度" class="headerlink" title="菜鸟进度"></a>菜鸟进度</h1><h3 id="2022-04-04"><a href="#2022-04-04" class="headerlink" title="2022/04/04"></a>2022/04/04</h3><p>花了三天看html和css，昨天下午结束，然后开始搭建的这个博客，实在太上头，没继续学了，今天总算差不多了，明天开始学js。</p><hr><h3 id="2022-04-11"><a href="#2022-04-11" class="headerlink" title="2022/04/11"></a>2022/04/11</h3><p>花了一周。。终于把JS啃完了，尝试着刷了几道力扣。目前只是过了一遍主要知识，实际上手较少，等到学完es6,ajax，开始上手react之后，开始着手具体项目。网课讲的JS还是太基础，朋友推荐了两本书，《JavaScript高级程序设计》、《你不知道的JavaScript》，希望能够以此更全面了解JavaScript，学习更加底层的知识。</p><hr><h3 id="2022-04-13"><a href="#2022-04-13" class="headerlink" title="2022/04/13"></a>2022/04/13</h3><p>es6结束。</p><hr><h3 id="2022-04-15"><a href="#2022-04-15" class="headerlink" title="2022/04/15"></a>2022/04/15</h3><p>AJAX结束，开始步入react，以及项目实战。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我是李孙，全世界最想变成猪的男人，你也可以叫我豚豚，Kevin，小俊,饼干兄…这是我的个人博客，用来分享前端学习以及日常生活。&lt;/p&gt;
&lt;h2 id=&quot;基本信息&quot;&gt;&lt;a href=&quot;#基本信息&quot; class=&quot;headerlink&quot; title=&quot;基本信息&quot;&gt;&lt;/a&gt;基本信</summary>
      
    
    
    
    <category term="日常" scheme="https://wztuntun.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="自我介绍" scheme="https://wztuntun.github.io/tags/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/"/>
    
    <category term="学习进度" scheme="https://wztuntun.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%BF%9B%E5%BA%A6/"/>
    
  </entry>
  
</feed>
