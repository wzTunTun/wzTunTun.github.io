<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>无 证 豚 豚</title>
  
  <subtitle>豚豚的个人博客</subtitle>
  <link href="https://wztuntun.github.io/atom.xml" rel="self"/>
  
  <link href="https://wztuntun.github.io/"/>
  <updated>2023-01-08T13:31:10.778Z</updated>
  <id>https://wztuntun.github.io/</id>
  
  <author>
    <name>Kevin Lee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>叮 博客将要迁移啦</title>
    <link href="https://wztuntun.github.io/2022/12/20/%E7%BD%91%E7%AB%99%E8%BF%81%E7%A7%BB/"/>
    <id>https://wztuntun.github.io/2022/12/20/%E7%BD%91%E7%AB%99%E8%BF%81%E7%A7%BB/</id>
    <published>2022-12-20T07:21:00.000Z</published>
    <updated>2023-01-08T13:31:10.778Z</updated>
    
    <content type="html"><![CDATA[<p>当前域名下的博客是我刚开始学前端时用hexo搭建的，不得不说hexo真的是非常好用，不需要什么专业知识即可搭建。日后我会手搓一个新的博客，当前博客的所有内容也会迁移到新的博客中。目前还想到了很多有意思的功能，也可能会添加到里面。</p><p>地址：<a href="http://118.25.185.177/">http://118.25.185.177/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当前域名下的博客是我刚开始学前端时用hexo搭建的，不得不说hexo真的是非常好用，不需要什么专业知识即可搭建。日后我会手搓一个新的博客，当前博客的所有内容也会迁移到新的博客中。目前还想到了很多有意思的功能，也可能会添加到里面。&lt;/p&gt;
&lt;p&gt;地址：&lt;a href=&quot;htt</summary>
      
    
    
    
    <category term="日常" scheme="https://wztuntun.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="项目" scheme="https://wztuntun.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="博客" scheme="https://wztuntun.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>协同算法之OT和CRDT</title>
    <link href="https://wztuntun.github.io/2022/07/07/ot%E5%92%8Ccrdt/"/>
    <id>https://wztuntun.github.io/2022/07/07/ot%E5%92%8Ccrdt/</id>
    <published>2022-07-07T14:41:00.000Z</published>
    <updated>2022-12-25T09:26:37.950Z</updated>
    
    <content type="html"><![CDATA[<h3 id="多人协同编辑"><a href="#多人协同编辑" class="headerlink" title="多人协同编辑"></a>多人协同编辑</h3><p>多人协同编辑，就是像腾讯文档等在线产品一样，可以两人及以上同时编辑一个文件，而双方的编辑操作互不干扰，能够自动解决冲突。<br>而目前，协同编辑的基本实现思路主要有两种</p><ul><li>CRDT</li><li>OT<h4 id="CRDT"><a href="#CRDT" class="headerlink" title="CRDT"></a>CRDT</h4>CRDT即为无冲突可复制数据类型，是一些分布式系统中适应于不同场景且可以保持最终以执行的数据结构统称。CRDT本身只是一个概念，需要自行实现数据结构。<h5 id="CRDT的类型"><a href="#CRDT的类型" class="headerlink" title="CRDT的类型"></a>CRDT的类型</h5></li><li>基于操作状态的CRDT</li><li>基于状态的CRDT<br>这两种CRDT在数学上是等价的，可以相互装换。基于操作的CRDT需要消息中间件提供额外的支持，对操作命名并保证通信过程中不会丢失或者交递信息时保证消息唯一。基于状态的消息中间件则需要通信时保证全部的状态完好的交递。<h5 id="基于操作的CRDT"><a href="#基于操作的CRDT" class="headerlink" title="基于操作的CRDT"></a>基于操作的CRDT</h5>基于操作的CRDT又称CMCRDT，CMCRDT在传播时，只包含数据更新操作信息。比方说，一个整数在执行了(+10), (-20) 操作后，CmRDT 广播时则只包含关于这个整数进行了(+10), (-20) 操作。其他的 DC 收到这个 CmRDT 后会在本地对相应的数据执行 CmRDT 中包含的操作。CmRDT 所能携带的操作必须是可交换的，通信模块必须保证所有 CmRDT 包都能被正确交递，但是顺序无需保证。<h5 id="基于状态的CRDT"><a href="#基于状态的CRDT" class="headerlink" title="基于状态的CRDT"></a>基于状态的CRDT</h5>基于状态的 CRDTs又称为CvRDTs。CvRDTs 会将本地全部的数据状态传播给其他 DC, 这些状态在接受到后会被一个函数做 merge 处理，所以这些状态必须是可交换的，关联的，幂等的。merge 函数会为在 CvRDT 之间提供一个 join 操作，将接收到 CvRDT 与本地数据合并。<h4 id="OT"><a href="#OT" class="headerlink" title="OT"></a>OT</h4>OT即为操作转换，是指对文档编辑以及同时编辑冲突解决的一类技术，且依赖服务器来保持最终一致性。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;多人协同编辑&quot;&gt;&lt;a href=&quot;#多人协同编辑&quot; class=&quot;headerlink&quot; title=&quot;多人协同编辑&quot;&gt;&lt;/a&gt;多人协同编辑&lt;/h3&gt;&lt;p&gt;多人协同编辑，就是像腾讯文档等在线产品一样，可以两人及以上同时编辑一个文件，而双方的编辑操作互不干扰，能够自</summary>
      
    
    
    
    <category term="学习" scheme="https://wztuntun.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="算法" scheme="https://wztuntun.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="多人协同" scheme="https://wztuntun.github.io/tags/%E5%A4%9A%E4%BA%BA%E5%8D%8F%E5%90%8C/"/>
    
  </entry>
  
  <entry>
    <title>二叉树</title>
    <link href="https://wztuntun.github.io/2022/06/25/%E6%A0%91/"/>
    <id>https://wztuntun.github.io/2022/06/25/%E6%A0%91/</id>
    <published>2022-06-25T11:20:00.000Z</published>
    <updated>2022-12-09T08:39:35.514Z</updated>
    
    <content type="html"><![CDATA[<p>还在更新中。。。</p><hr><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><h4 id="1-二叉树的遍历方式"><a href="#1-二叉树的遍历方式" class="headerlink" title="1. 二叉树的遍历方式"></a>1. 二叉树的遍历方式</h4><p>二叉树主要有两种遍历方式：</p><ul><li>深度优先遍历：先往深走，遇到叶子节点再往回走。</li><li>广度优先遍历：一层一层的去遍历。<br>进一步拓展：</li><li>深度优先遍历<ul><li>前序遍历（递归法，迭代法）</li><li>中序遍历（递归法，迭代法）</li><li>后序遍历（递归法，迭代法）</li></ul></li><li>广度优先遍历<ul><li>层次遍历（迭代法）</li></ul></li></ul><p>前序、中序、后续对应顺序如下<br><img src="https://s1.ax1x.com/2022/12/09/zRjatJ.png"><br>代码(递归)：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">preorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">dfs</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">//先序遍历所以从父节点开始</span>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//递归左子树</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//递归右子树</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 中序</span>    <span class="token comment">// dfs(root.left);</span>    <span class="token comment">// res.push(root.val);</span>    <span class="token comment">// dfs(root.right);</span>    <span class="token comment">// 后序</span>    <span class="token comment">// dfs(root.left);</span>    <span class="token comment">// dfs(root.right);</span>    <span class="token comment">// res.push(root.val);</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">//只使用一个参数 使用闭包进行存储结果</span>  <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码(迭代)：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 入栈 右 -> 左</span><span class="token comment">// 出栈 中 -> 左 -> 右</span><span class="token literal-property property">前序遍历</span><span class="token operator">:</span> <span class="token keyword">var</span> <span class="token function-variable function">preorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> cur <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cur <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    cur<span class="token punctuation">.</span>right <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    cur<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 入栈 左 -> 右</span><span class="token comment">// 出栈 左 -> 中 -> 右</span><span class="token literal-property property">中序遍历</span><span class="token operator">:</span> <span class="token keyword">var</span> <span class="token function-variable function">inorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> cur <span class="token operator">=</span> root<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">||</span> cur<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 左</span>      cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// --> 弹出 中</span>      cur <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 右</span>      cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 入栈 左 -> 右</span><span class="token comment">// 出栈 中 -> 右 -> 左 结果翻转</span><span class="token literal-property property">后序遍历</span><span class="token operator">:</span> <span class="token keyword">var</span> <span class="token function-variable function">postorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> cur <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>    cur <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    cur<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    cur<span class="token punctuation">.</span>right <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二叉树的最大深度"><a href="#二叉树的最大深度" class="headerlink" title="二叉树的最大深度"></a>二叉树的最大深度</h4><p><img src="https://s1.ax1x.com/2022/12/09/zRzv3d.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 递归</span><span class="token keyword">var</span> <span class="token function-variable function">maxdepth</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//使用递归的方法 递归三部曲</span>  <span class="token comment">//1. 确定递归函数的参数和返回值</span>  <span class="token keyword">const</span> <span class="token function-variable function">getdepth</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//2. 确定终止条件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//3. 确定单层逻辑</span>    <span class="token keyword">let</span> leftdepth <span class="token operator">=</span> <span class="token function">getdepth</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> rightdepth <span class="token operator">=</span> <span class="token function">getdepth</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> depth <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftdepth<span class="token punctuation">,</span> rightdepth<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> depth<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">getdepth</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 迭代</span><span class="token keyword">var</span> <span class="token function-variable function">maxDepth</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> size <span class="token operator">=</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment">/* 层数+1 */</span>    count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>size<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      node<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>      node<span class="token punctuation">.</span>right <span class="token operator">&amp;&amp;</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="对称二叉树"><a href="#对称二叉树" class="headerlink" title="对称二叉树"></a>对称二叉树</h4><p><img src="https://s1.ax1x.com/2022/12/09/zWSYvR.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">isSymmetric</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//使用递归遍历左右子树 递归三部曲</span>  <span class="token comment">// 1. 确定递归的参数 root.left root.right和返回值true false</span>  <span class="token keyword">const</span> <span class="token function-variable function">compareNode</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//2. 确定终止条件 空的情况</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>      <span class="token punctuation">(</span>left <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span>      <span class="token punctuation">(</span>left <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>val <span class="token operator">!==</span> right<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//3. 确定单层递归逻辑</span>    <span class="token keyword">let</span> outSide <span class="token operator">=</span> <span class="token function">compareNode</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>left<span class="token punctuation">,</span> right<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> inSide <span class="token operator">=</span> <span class="token function">compareNode</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>right<span class="token punctuation">,</span> right<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> outSide <span class="token operator">&amp;&amp;</span> inSide<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">compareNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;还在更新中。。。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;二叉树&quot;&gt;&lt;a href=&quot;#二叉树&quot; class=&quot;headerlink&quot; title=&quot;二叉树&quot;&gt;&lt;/a&gt;二叉树&lt;/h3&gt;&lt;h4 id=&quot;1-二叉树的遍历方式&quot;&gt;&lt;a href=&quot;#1-二叉树的遍历方式&quot; class=</summary>
      
    
    
    
    <category term="学习" scheme="https://wztuntun.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="数据结构" scheme="https://wztuntun.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="https://wztuntun.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>TCP和UDP</title>
    <link href="https://wztuntun.github.io/2022/06/13/TCP%E5%92%8CUDP/"/>
    <id>https://wztuntun.github.io/2022/06/13/TCP%E5%92%8CUDP/</id>
    <published>2022-06-13T14:16:00.000Z</published>
    <updated>2022-07-07T14:41:14.596Z</updated>
    
    <content type="html"><![CDATA[<h3 id="TCP和UDP"><a href="#TCP和UDP" class="headerlink" title="TCP和UDP"></a>TCP和UDP</h3><h4 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h4><ul><li><p>TCP是面向连接的服务，在传输至前必须要建立起连接，传输数据后要释放连接。</p></li><li><p>TCP不提供广播或多播服务。</p></li><li><p>TCP利用校验和、序列号、超时重传、流量控制以及拥塞避免的方式保证传输的可靠性。</p><ul><li>应用数据被分割成TCP认为的最适合发送的数据块。TCP给发送的每一个包进行编号，接收方对数据包进行排序，把有序数据传送给应用层。</li><li>校验和：TCP将保持它首部和数据的校验和。这是一个端到端的校验和，目的是监测数据在传输过程中的任何变化。如果收到段检验出现问题，则将丢掉这个报文段并不确认收到此段。</li><li>TCP接收端会丢弃重复的数据。</li><li>流量控制：TCP连接的每一个地方都有固定大小的缓冲空间，TCP的接收端只允许发送端发送接收端缓冲区能够接纳的数据，若速率太快，会提示发送端降低发送的速率，防止包的丢失。</li><li>拥塞控制：当网络拥塞时，减少数据的发送。</li><li>ARQ协议：为了实现可靠传输，它的基本原理就是每发送一个分组就停止发送，等待对方确认后，再发送下一个。</li><li>超时重传：当发送一个段后，会启动一个定时器，若目的端不能及时收到确认，则会重新发送报文段。</li></ul></li><li><p>TCP一般用于文件传输、发送和接收邮件、远程登录等场景。</p></li><li><p>TCP以字节流的形式进行传输。</p></li><li><p>因为设有缓存，TCP允许通信双方的应用程序在任何时候都能发送数据</p></li></ul><h4 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h4><ul><li>在传送数据之前不需要先建立连接，远地主机在收到 UDP 报文后，不需要给出任何确认。</li><li>虽然 UDP 不提供可靠交付。</li><li>UDP以独立报文形式一个一个进行传输。</li></ul><h4 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h4><ol><li>TCP 面向连接（（如打电话要先拨号建立连接）;UDP 是无连接的，即发送数据之前不需要建立连接。</li><li>TCP 要求安全性，提供可靠的服务，通过 TCP 连接传送的数据，不丢失、不重复、安全可靠。而 UDP 尽最大努力交付，即不保证可靠交付。</li><li>TCP 是点对点连接的，UDP 一对一，一对多，多对多都可以。</li><li>TCP 传输效率相对较低，而 UDP 传输效率高，它适用于对高速传输和实时性有较高的通信或广播通信。</li><li>TCP 适合用于网页，邮件等；UDP 适合用于视频，语音广播等。</li><li>TCP 面向字节流，UDP 面向报文。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;TCP和UDP&quot;&gt;&lt;a href=&quot;#TCP和UDP&quot; class=&quot;headerlink&quot; title=&quot;TCP和UDP&quot;&gt;&lt;/a&gt;TCP和UDP&lt;/h3&gt;&lt;h4 id=&quot;TCP&quot;&gt;&lt;a href=&quot;#TCP&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="学习" scheme="https://wztuntun.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="计网" scheme="https://wztuntun.github.io/tags/%E8%AE%A1%E7%BD%91/"/>
    
    <category term="面试" scheme="https://wztuntun.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>模块化</title>
    <link href="https://wztuntun.github.io/2022/06/04/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    <id>https://wztuntun.github.io/2022/06/04/%E6%A8%A1%E5%9D%97%E5%8C%96/</id>
    <published>2022-06-04T07:20:00.000Z</published>
    <updated>2022-12-09T08:07:23.372Z</updated>
    
    <content type="html"><![CDATA[<h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><blockquote><p>模块化是指将一个大的程序文件，拆分成许多小的文件，然后将小文件组合起来</p></blockquote><p>模块化功能主要由两个命令构成：<code>export</code>和<code>import</code></p><ul><li>export 用于规定模块的对外接口</li><li>import 用于输入其他模块提供的功能</li></ul><h3 id="模块化的好处"><a href="#模块化的好处" class="headerlink" title="模块化的好处"></a>模块化的好处</h3><ol><li>防止命名冲突</li><li>代码复用</li><li>高维护性</li></ol><h3 id="模块暴露数据语法"><a href="#模块暴露数据语法" class="headerlink" title="模块暴露数据语法"></a>模块暴露数据语法</h3><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">export let school &#x3D; &#39;123&#39;export function()&#123;    console.log(&#39;我们可以教给你开发技能&#39;)&#125;&#x2F;&#x2F;统一暴露let school &#x3D; &#39;123&#39;findJob()&#123;    console.log(&#39;我们可以帮助你&#39;)&#125;export &#123;school, findJob&#125;&#x2F;&#x2F;引入模块import * as m2 from &#39;.&#x2F;src&#x2F;js&#x2F;m2.js&#39;&#x2F;&#x2F;默认暴露export default&#123;    school:&#39;atg&#39;,    change: function()&#123;        console.log(&#39;我么可以&#39;)    &#125;&#125;&#x2F;&#x2F;引入import * as m3 from &#39;.&#x2F;src&#x2F;js&#x2F;m3.js&#39;&#x2F;&#x2F;用change方法m3.default.change()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模块引入数据语法汇总"><a href="#模块引入数据语法汇总" class="headerlink" title="模块引入数据语法汇总"></a>模块引入数据语法汇总</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//1.通用的导入方式</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> m1 <span class="token keyword">from</span> <span class="token string">'./src/js/m1.js'</span><span class="token comment">//2.解构赋值形式</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>school<span class="token punctuation">,</span>teach<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./src/js/m1.js'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span><span class="token keyword">default</span> <span class="token operator">*</span> <span class="token keyword">as</span> m3<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./src/js/m3.js'</span><span class="token comment">//3.简便形式  针对默认暴露</span><span class="token keyword">import</span> m3 <span class="token keyword">from</span> <span class="token string">'./src/js/m3.js'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;模块化&quot;&gt;&lt;a href=&quot;#模块化&quot; class=&quot;headerlink&quot; title=&quot;模块化&quot;&gt;&lt;/a&gt;模块化&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;模块化是指将一个大的程序文件，拆分成许多小的文件，然后将小文件组合起来&lt;/p&gt;
&lt;/blockquote&gt;</summary>
      
    
    
    
    <category term="学习" scheme="https://wztuntun.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="ES6" scheme="https://wztuntun.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>浏览器缓存-强缓存和协商缓存</title>
    <link href="https://wztuntun.github.io/2022/04/18/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98-%E5%BC%BA%E7%BC%93%E5%AD%98%E5%92%8C%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98/"/>
    <id>https://wztuntun.github.io/2022/04/18/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98-%E5%BC%BA%E7%BC%93%E5%AD%98%E5%92%8C%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98/</id>
    <published>2022-04-18T11:27:00.000Z</published>
    <updated>2022-06-13T14:19:44.470Z</updated>
    
    <content type="html"><![CDATA[<h3 id="浏览器缓存-强缓存和协商缓存"><a href="#浏览器缓存-强缓存和协商缓存" class="headerlink" title="浏览器缓存-强缓存和协商缓存"></a>浏览器缓存-强缓存和协商缓存</h3><p>浏览器缓存是浏览器在本地对用户最近请求过的文档进行存储，当访问者再次访问同一页面时，浏览器就可以直接从本地加载文档.<br>优点：减少沉郁的数据传输<br>减少服务器负担<br>加快客户端加载网页的速度</p><p>浏览器缓存主要分为强缓存和协商缓存。</p><ul><li>强缓存不会向服务器发送请求，而是直接从缓存中存入读取，浏览器在请求某一资源的时候，会先获取该资源的 header 信息，根据 header 中的 Cache-Control 和 Expires 来判断是否过期。若没过期会直接从缓存中获取信息。</li><li>协商缓存是在强缓存失效后，浏览器携带缓存标识向服务器发送请求，服务器根据缓存标识决定是否使用缓存。如果显示过期，则浏览器会向服务器发送请求，并且会携带第一次请求返回的有关的 header 字段，就比如说，客户端会将先前服务端发送的 etag 发送给服务器，服务器会将这个 etag 与服务器的进行对比，如果相同，会返回状态 304，客户端继续使用本地缓存，如果不相同，会返回状态 200，将最新资源发给客户端</li></ul><blockquote><p>参考文档：<a href="https://blog.csdn.net/zouzixuan/article/details/84677548?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165028089316780265412126%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165028089316780265412126&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-84677548.142%5Ev9%5Econtrol,157%5Ev4%5Enew_style&amp;utm_term=%E9%9D%A2%E8%AF%95+%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/zouzixuan/article/details/84677548?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165028089316780265412126%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165028089316780265412126&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-84677548.142^v9^control,157^v4^new_style&amp;utm_term=%E9%9D%A2%E8%AF%95+%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98&amp;spm=1018.2226.3001.4187</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;浏览器缓存-强缓存和协商缓存&quot;&gt;&lt;a href=&quot;#浏览器缓存-强缓存和协商缓存&quot; class=&quot;headerlink&quot; title=&quot;浏览器缓存-强缓存和协商缓存&quot;&gt;&lt;/a&gt;浏览器缓存-强缓存和协商缓存&lt;/h3&gt;&lt;p&gt;浏览器缓存是浏览器在本地对用户最近请求过的文</summary>
      
    
    
    
    <category term="学习" scheme="https://wztuntun.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="面试" scheme="https://wztuntun.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>浅谈受控组件</title>
    <link href="https://wztuntun.github.io/2022/04/17/%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6/"/>
    <id>https://wztuntun.github.io/2022/04/17/%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6/</id>
    <published>2022-04-17T14:01:00.000Z</published>
    <updated>2022-06-13T14:19:49.014Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>跟着网课学习react的过程中，在做评论区模块的过程中，遇到这样一串代码。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">...</span>上部省略<span class="token operator">&lt;</span>textarea                cols<span class="token operator">=</span><span class="token string">"80"</span>                rows<span class="token operator">=</span><span class="token string">"5"</span>                placeholder<span class="token operator">=</span><span class="token string">"发条友善的评论"</span>                className<span class="token operator">=</span><span class="token string">"ipt-txt"</span>                value<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>comment<span class="token punctuation">&#125;</span>                onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>textareaChange<span class="token punctuation">&#125;</span>              <span class="token operator">/</span><span class="token operator">></span>         <span class="token operator">...</span>下部省略<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>他设置了一个comment，再通过onChange监听当前textarea区域，把value值赋给comment，刚看到这串代码时，没明白为什么要以这种方式获取value，查阅相关资料后，才明白，react中表单组件的defaultValue值一旦经过传递后，后续改变都会被忽略，具体来说这原本是一种react非受控组件，其状态是在textarea的react内部控制，不受调用者控制。</p><h3 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h3><p>什么是受控组件？  受控组件就是添加了value的组件，而添加了value的组件是不会维护自己的state的，一旦设定了某个值，就需要调用者控制state改变value值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">textareaChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">comment</span><span class="token operator">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过onChange时刻监听textarea，改变value的state，将最新的value值传给comment，来完成对组件的控制。</p><blockquote><p>参考：<a href="https://www.cnblogs.com/sexintercourse/p/16082406.html">https://www.cnblogs.com/sexintercourse/p/16082406.html</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;跟着网课学习react的过程中，在做评论区模块的过程中，遇到这样一串代码。&lt;/p&gt;
&lt;pre class=&quot;line-numbers lan</summary>
      
    
    
    
    <category term="学习" scheme="https://wztuntun.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="React" scheme="https://wztuntun.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>innerHTML和createElement效率对比</title>
    <link href="https://wztuntun.github.io/2022/04/10/innerHTML%E5%92%8CcreateElement%E6%95%88%E7%8E%87%E5%AF%B9%E6%AF%94/"/>
    <id>https://wztuntun.github.io/2022/04/10/innerHTML%E5%92%8CcreateElement%E6%95%88%E7%8E%87%E5%AF%B9%E6%AF%94/</id>
    <published>2022-04-10T04:48:00.000Z</published>
    <updated>2022-12-25T05:50:23.096Z</updated>
    
    <content type="html"><![CDATA[<h3 id="动态创建元素的方式"><a href="#动态创建元素的方式" class="headerlink" title="动态创建元素的方式"></a>动态创建元素的方式</h3><ul><li><p>document.write()</p></li><li><p>innerHTML</p></li><li><p>document.createElement()</p></li></ul><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ol><li>document.write是直接将内容写入页面的内容流，但是当文档流执行完毕，它会导致页面全部重绘。（不常用）</li><li>innerHTML是将内容写入某个DOM节点，不会导致页面全部重绘。</li><li>innerHTML做字符串拼接时，效率较低，使用数组拼接时效率更高，但结构稍微复杂一点。</li><li>createElement()创建多个元素时效率稍微低一点点，但结构清晰。</li></ol><h3 id="具体演示"><a href="#具体演示" class="headerlink" title="具体演示"></a>具体演示</h3><h5 id="innerHTML（字符串拼接）"><a href="#innerHTML（字符串拼接）" class="headerlink" title="innerHTML（字符串拼接）"></a>innerHTML（字符串拼接）</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> d1 <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> <span class="token string">'&lt;div style="width:100px;height:2px;border:1px solid blue;">&lt;/div>'</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">var</span> d2 <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d2 <span class="token operator">-</span> d1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行耗时如下</p><p><img src="https://s1.ax1x.com/2022/04/10/Lk8QgS.png"></p><h5 id="innerHTML（数组拼接）"><a href="#innerHTML（数组拼接）" class="headerlink" title="innerHTML（数组拼接）"></a>innerHTML（数组拼接）</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> d1 <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> <span class="token string">'&lt;div style="width:100px;height:2px;border:1px solid blue;">&lt;/div>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> d2 <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d2 <span class="token operator">-</span> d1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行耗时如下</p><p><img src="https://s1.ax1x.com/2022/04/10/Lk8W8K.png"></p><p>可以说效果提升是非常显著。</p><h5 id="createElement"><a href="#createElement" class="headerlink" title="createElement()"></a>createElement()</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> d1 <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">creatElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">'100px'</span><span class="token punctuation">;</span>                div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">'2px'</span><span class="token punctuation">;</span>                div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>border <span class="token operator">=</span> <span class="token string">'1px solid blue'</span><span class="token punctuation">;</span>                document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> d2 <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d2 <span class="token operator">-</span> d1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行耗时如下</p><p><img src="https://s1.ax1x.com/2022/04/10/LkGxW6.png"></p><p>比上一种方法运行效果稍慢一些，但结构清晰，有利于代码维护。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;动态创建元素的方式&quot;&gt;&lt;a href=&quot;#动态创建元素的方式&quot; class=&quot;headerlink&quot; title=&quot;动态创建元素的方式&quot;&gt;&lt;/a&gt;动态创建元素的方式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;document.write()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p</summary>
      
    
    
    
    <category term="学习" scheme="https://wztuntun.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaScript" scheme="https://wztuntun.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>两数之和-年轻人的第一道力扣</title>
    <link href="https://wztuntun.github.io/2022/04/09/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C-%E5%B9%B4%E8%BD%BB%E4%BA%BA%E7%9A%84%E7%AC%AC%E4%B8%80%E9%81%93%E5%8A%9B%E6%89%A3/"/>
    <id>https://wztuntun.github.io/2022/04/09/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C-%E5%B9%B4%E8%BD%BB%E4%BA%BA%E7%9A%84%E7%AC%AC%E4%B8%80%E9%81%93%E5%8A%9B%E6%89%A3/</id>
    <published>2022-04-09T13:23:00.000Z</published>
    <updated>2022-12-24T12:29:00.599Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>终于终于，博主开始了艰苦LeetCode刷题的第一步，算法的起点———两数之和。</p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><blockquote><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。<br>你可以按任意顺序返回答案。</p></blockquote><h6 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h6><pre class="line-numbers language-none"><code class="language-none">输入：nums &#x3D; [2,7,11,15], target &#x3D; 9输出：[0,1]解释：因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。来源：力扣（LeetCode）链接：https:&#x2F;&#x2F;leetcode-cn.com&#x2F;problems&#x2F;two-sum著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="开始解题"><a href="#开始解题" class="headerlink" title="开始解题"></a>开始解题</h3><h5 id="自己的思考"><a href="#自己的思考" class="headerlink" title="自己的思考"></a>自己的思考</h5><p>由于没有什么算法基础，看到题目首先自然而然想到的就是暴力求解😂。通过两次循环，先从头选定数组的第一个元素，然后遍历剩下的元素，如果找到和等于target的就输出，否则进入下一次循环。<br>代码如下</p><pre class="line-numbers language-javaScript" data-language="javaScript"><code class="language-javaScript">var twoSum &#x3D; function(nums, target) &#123;        for(var i &#x3D; 0;i&lt;nums.length;i++)&#123;        for(var j&#x3D;i+1;j&lt;nums.length;j++)            if(nums[i]+nums[j]&#x3D;&#x3D;target)&#123;                return [i,j];                break            &#125;        &#125;            &#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，效果就很拉跨。<br><img src="https://s1.ax1x.com/2022/04/09/LFGpmd.png" alt="结果" title="执行结果"></p><h5 id="交流学习"><a href="#交流学习" class="headerlink" title="交流学习"></a>交流学习</h5><p>自己用笨办法求解完之后，查看了官方的解法————利用哈希表。</p><h6 id="思路及算法"><a href="#思路及算法" class="headerlink" title="思路及算法"></a>思路及算法</h6><p>运用暴力法寻找和等于target的目标的复杂度太高，由于有两次循环，因此时间复杂度为$O(N^2)$。而运用哈希表，可以将时间复杂度从$O(N^2)$降低到$O(1)$。</p><p>原理就是，我们遍历到数字 x 时，用 target 减去 x，就会得到 y，若 y 存在于哈希表中，我们就可以直接返回结果了。若 y 不存在，那么我们需要将 x 存入哈希表，好让后续遍历的数字使用。<br>代码如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> d <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终提交后，执行用时果然快了不少</p><p><img src="https://s1.ax1x.com/2022/04/10/LF0C7D.png" alt="结果"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;终于终于，博主开始了艰苦LeetCode刷题的第一步，算法的起点———两数之和。&lt;/p&gt;
&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot;</summary>
      
    
    
    
    <category term="学习" scheme="https://wztuntun.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaScript" scheme="https://wztuntun.github.io/tags/JavaScript/"/>
    
    <category term="算法" scheme="https://wztuntun.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="力扣" scheme="https://wztuntun.github.io/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>markdown的基本语法</title>
    <link href="https://wztuntun.github.io/2022/04/04/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>https://wztuntun.github.io/2022/04/04/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</id>
    <published>2022-04-04T10:20:00.000Z</published>
    <updated>2022-04-04T11:19:47.367Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Markdown是一种轻量级标记语言，创始人为约翰·格鲁伯（英语：John Gruber）。 它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。</p></blockquote><h1 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h1><p>在想要设置标题的文字前加#来表示，并用空格隔开。<br>一个#是一级标题，两个##是二级标题，以此类推，最高支持六级标题。</p><pre class="line-numbers language-none"><code class="language-none">1.# 一级标题2.## 二级标题3.### 三级标题4.#### 四级标题5.##### 五级标题6.###### 六级标题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h1 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h1><pre class="line-numbers language-none"><code class="language-none">1.加粗**内容**2.高亮&#96;内容&#96;3.删除线~~内容~~4.斜体*内容*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下<br>1.加粗<br><strong>内容</strong><br>2.高亮<br><code>内容</code><br>3.删除线<br><del>内容</del><br>4.斜体<br><em>内容</em></p><h1 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h1><p>在引用文字前加&gt;即可。几层引用加几个。<br>(试了一下，貌似可以无限加，但效果会很辣眼睛)</p><pre class="line-numbers language-none"><code class="language-none">&gt;内容&gt;&gt;内容&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>效果如下</p><blockquote><p>内容</p><blockquote><p>内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h1 id="四、分隔线"><a href="#四、分隔线" class="headerlink" title="四、分隔线"></a>四、分隔线</h1><p>三个及以上的-或*即可添加分隔线</p><pre class="line-numbers language-none"><code class="language-none">-------********<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下，都是相同的</p><hr><hr><hr><hr><h1 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h1><pre class="line-numbers language-none"><code class="language-none">语法![alt](图片地址 &quot;title&quot;)alt,title分别对应html中的属性，皆可省略。alt表示显示在图片下方的文字title表示鼠标悬停在图片时的显示文本（注意这里要加引号）示例![MyTunTun](https:&#x2F;&#x2F;ss0.bdstatic.com&#x2F;70cFvHSh_Q1YnxGkpoWK1HF6hhy&#x2F;it&#x2F;u&#x3D;702257389,1274025419&amp;fm&#x3D;27&amp;gp&#x3D;0.jpg &quot;我的豚豚&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下<br><img src="https://wztuntun.github.io/medias/featureimages/1.jpg" alt="MyTunTun" title="我的豚豚"></p><h1 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h1><pre class="line-numbers language-none"><code class="language-none">语法[超链接名](超链接地址 &quot;超链接title&quot;)title可省略示例[豚豚的博客](https:&#x2F;&#x2F;wztuntun.github.io&#x2F;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下<br><a href="https://wztuntun.github.io/">豚豚的博客</a></p><h1 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h1><pre class="line-numbers language-none"><code class="language-none">无序列表（- + *任意一种都行，与文字间用空格隔开）- 目录一+ 目录二* 目录三有序列表1. 名称2. 名称3. 名称列表嵌套下一级前敲两个空格即可- 一级目录  - 二级目录  - 二级目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下</p><ul><li>目录一</li><li>目录二</li><li>目录三</li></ul><ol><li>名称</li><li>名称</li><li>名称</li></ol><ul><li>一级目录<ul><li>二级目录</li><li>二级目录</li></ul></li></ul><h1 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h1><pre class="line-numbers language-none"><code class="language-none">表头|表头|表头--|:--:|--:内容|内容|内容内容|内容|内容第二行分割表头和内容，表示了对齐方式，默认左对齐，还有 右对齐 和 居中。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下</p><table><thead><tr><th>表头</th><th align="center">表头</th><th align="right">表头</th></tr></thead><tbody><tr><td>内容</td><td align="center">内容</td><td align="right">内容</td></tr><tr><td>内容</td><td align="center">内容</td><td align="right">内容</td></tr></tbody></table><h1 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h1><pre class="line-numbers language-none"><code class="language-none">（&#96;&#96;&#96;）+语言（java）内容（&#96;&#96;&#96;）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里为了演示时防止转译，在三个反引号外加了括号，实际上是没有的，需要去除。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Markdown是一种轻量级标记语言，创始人为约翰·格鲁伯（英语：John Gruber）。 它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。&lt;/p&gt;</summary>
      
    
    
    
    <category term="学习" scheme="https://wztuntun.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="markdown" scheme="https://wztuntun.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>哈喽！你好！！</title>
    <link href="https://wztuntun.github.io/2022/04/03/hello-world/"/>
    <id>https://wztuntun.github.io/2022/04/03/hello-world/</id>
    <published>2022-04-03T12:48:00.000Z</published>
    <updated>2022-04-15T12:19:51.636Z</updated>
    
    <content type="html"><![CDATA[<p>我是李孙，全世界最想变成猪的男人，你也可以叫我豚豚，Kevin，小俊,饼干兄…这是我的个人博客，用来分享前端学习以及日常生活。</p><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p><strong>化名：</strong>李孙<br><strong>性别：</strong>男<br><strong>昵称：</strong>无证豚豚<br><strong>外号：</strong>（超级多，就不一一列举了）<br><strong>状态：</strong>单身<br><strong>爱好：</strong>出门闲晃，旅游，摄影，打音游，交朋友，上网冲浪<br><strong>外貌：</strong>和猪一样</p><h1 id="闲话"><a href="#闲话" class="headerlink" title="闲话"></a>闲话</h1><p>22年年初决定试试某岗位实习生，在一顿海投但收获为零之后，意识到了自己确实缺乏竞争力，在朋友的建议下，毅然决然准备转行前端。</p><hr><h1 id="菜鸟进度"><a href="#菜鸟进度" class="headerlink" title="菜鸟进度"></a>菜鸟进度</h1><h3 id="2022-04-04"><a href="#2022-04-04" class="headerlink" title="2022/04/04"></a>2022/04/04</h3><p>花了三天看html和css，昨天下午结束，然后开始搭建的这个博客，实在太上头，没继续学了，今天总算差不多了，明天开始学js。</p><hr><h3 id="2022-04-11"><a href="#2022-04-11" class="headerlink" title="2022/04/11"></a>2022/04/11</h3><p>花了一周。。终于把JS啃完了，尝试着刷了几道力扣。目前只是过了一遍主要知识，实际上手较少，等到学完es6,ajax，开始上手react之后，开始着手具体项目。网课讲的JS还是太基础，朋友推荐了两本书，《JavaScript高级程序设计》、《你不知道的JavaScript》，希望能够以此更全面了解JavaScript，学习更加底层的知识。</p><hr><h3 id="2022-04-13"><a href="#2022-04-13" class="headerlink" title="2022/04/13"></a>2022/04/13</h3><p>es6结束。</p><hr><h3 id="2022-04-15"><a href="#2022-04-15" class="headerlink" title="2022/04/15"></a>2022/04/15</h3><p>AJAX结束，开始步入react，以及项目实战。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我是李孙，全世界最想变成猪的男人，你也可以叫我豚豚，Kevin，小俊,饼干兄…这是我的个人博客，用来分享前端学习以及日常生活。&lt;/p&gt;
&lt;h2 id=&quot;基本信息&quot;&gt;&lt;a href=&quot;#基本信息&quot; class=&quot;headerlink&quot; title=&quot;基本信息&quot;&gt;&lt;/a&gt;基本信</summary>
      
    
    
    
    <category term="日常" scheme="https://wztuntun.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="自我介绍" scheme="https://wztuntun.github.io/tags/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/"/>
    
    <category term="学习进度" scheme="https://wztuntun.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%BF%9B%E5%BA%A6/"/>
    
  </entry>
  
</feed>
